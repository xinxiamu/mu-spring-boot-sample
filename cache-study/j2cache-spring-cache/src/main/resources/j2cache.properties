#########################################
# J2Cache全局配置
#########################################
# 缓存provider名称
# L1: caffeine | ehcache | ehcache3 |
# L2: redis | lettuce | readonly-redis | memcached
# 其他： none | 自定义classname
# 开启1级缓存Caffeine
j2cache.L1.provider_class = caffeine
# 开启2级缓存Redis - SpringBoot Redis自定义实现
j2cache.L2.provider_class = net.oschina.j2cache.cache.support.redis.SpringRedisProvider
# 查看源码发现j2cache-spring-boot2-starter中J2CacheSpringRedisAutoConfiguration使用以一套配置属性（匹配J2cache redis属性）
# 所以此处jedis和lettuce可以使用同一套配置redis.*
j2cache.L2.config_section = redis
# 是否启用同步一级缓存的Time-To-Live超时时间到Redis TTL（true启用，false不启用则永不超时）
j2cache.sync_ttl_to_redis = true
# 缓存变更广播方式（jgroups | redis | lettuce | rabbitmq | rocketmq | none | 自定义class）
# 启用缓存变更广播redis实现 - SpringBoot Redis自定义实现
j2cache.broadcast = net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy
# Whether to cache null objects by default (default false) 不缓存空值
j2cache.default_cache_null_object = false
# 二级缓存序列化格式（fst（推荐） | kryo | json | fastjson | java（默认） | fse | 自定义classname）
# 使用application.yml中配置
j2cache.serialization = ${j2cache.j2CacheConfig.serialization}


#########################################
# L1 Caffeine配置
#########################################
# caffeine缓存配置
# 格式如下，目前仅支持配置设置cache中最多缓存对象数量及过期时间
# caffeine.region.[regionName] = size, xxxx[s|m|h|d]
caffeine.properties = caffeine.properties

#########################################
# L2 Redis（Jedis）配置
#########################################
# Redis集群模式（single | sentinel | cluster | sharded）
redis.mode = single
# Redis存储模式
# generic: 支持key过期，使用key/value存储
# hash: 不支持key过期，使用hash存储
redis.storage = generic
# Redis发布订阅（Pub/Sub）对应的channel名称
redis.channel = j2cache
# Redis缓存命名空间，可选（默认空）
# key格式 = namespace:region:key
redis.namespace = j2cache
# redis command scan parameter count, default[1000]
#redis.scanCount = 1000

########### Redis连接配置 ###############
# 多节点使用半角逗号分隔，例如: 192.168.0.10:6379,192.168.0.11:6379,192.168.0.12:6379
redis.hosts = 192.168.0.106:6380
redis.timeout = 2000
redis.password = a1234567
redis.database = 0
redis.ssl = false

########### Redis连接池配置 ###############
# 最大连接数（获取连接时进行判断，也即连接数的上限）
redis.maxTotal = 100
# 最大空闲连接数（在归还连接时判断，若当前连接数超过maxIdle连接数，则释放归还的连接）
redis.maxIdle = 10

# 最小空闲连接数（超过maxIdle则使用maxIdle值，单独的Evict任务负责清理超时的连接）
redis.minIdle = 10
# 驱逐空闲连接的最小间隔时间
redis.minEvictableIdleTimeMillis = 60000
# minEvictableIdleTimeMillis为正数则覆盖softMinEvictableIdleTimeMillis 配置
redis.softMinEvictableIdleTimeMillis = 10
# 驱逐空闲连接的Evict任务运行时间间隔
redis.timeBetweenEvictionRunsMillis = 300000
# 单次Evict清理任务的测试连接数据（即仅对指定数据量的连接进行测试，并将无效连接释放）
redis.numTestsPerEvictionRun = 10

# 获取连接的最大等待时长ms（当连接池已耗尽时）
redis.maxWaitMillis = 5000
# 当资源池耗尽，获取连接时是否需要等待
redis.blockWhenExhausted = true

# 获取资源后进先出（false则对应先进先出）
redis.lifo = false
# 是否测试连接可用
redis.testOnBorrow = false
redis.testOnReturn = false
redis.testWhileIdle = true
redis.jmxEnabled = true
