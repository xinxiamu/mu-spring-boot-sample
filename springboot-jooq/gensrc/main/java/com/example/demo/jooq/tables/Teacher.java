/*
 * This file is generated by jOOQ.
*/
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Keys;
import com.example.demo.jooq.Testdb;
import com.example.demo.jooq.tables.records.TeacherRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teacher extends TableImpl<TeacherRecord> {

    private static final long serialVersionUID = -1805458399;

    /**
     * The reference instance of <code>testdb.teacher</code>
     */
    public static final Teacher TEACHER = new Teacher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeacherRecord> getRecordType() {
        return TeacherRecord.class;
    }

    /**
     * The column <code>testdb.teacher.id</code>.
     */
    public final TableField<TeacherRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testdb.teacher.pepole_basic_id</code>.
     */
    public final TableField<TeacherRecord, Long> PEPOLE_BASIC_ID = createField("pepole_basic_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>testdb.teacher.school_id</code>.
     */
    public final TableField<TeacherRecord, Long> SCHOOL_ID = createField("school_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>testdb.teacher</code> table reference
     */
    public Teacher() {
        this("teacher", null);
    }

    /**
     * Create an aliased <code>testdb.teacher</code> table reference
     */
    public Teacher(String alias) {
        this(alias, TEACHER);
    }

    private Teacher(String alias, Table<TeacherRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teacher(String alias, Table<TeacherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Testdb.TESTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TeacherRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEACHER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TeacherRecord> getPrimaryKey() {
        return Keys.KEY_TEACHER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TeacherRecord>> getKeys() {
        return Arrays.<UniqueKey<TeacherRecord>>asList(Keys.KEY_TEACHER_PRIMARY, Keys.KEY_TEACHER_UK_35Q12M078DXPACGOMDD8R8RUK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TeacherRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeacherRecord, ?>>asList(Keys.FKEQS9I685Y0G9MXTHYBYJCI5W9, Keys.FKRG46BNMGBCCCAYV14NAYMQG3R);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Teacher as(String alias) {
        return new Teacher(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teacher rename(String name) {
        return new Teacher(name, null);
    }
}
