/*
 * This file is generated by jOOQ.
*/
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Keys;
import com.example.demo.jooq.Testdb;
import com.example.demo.jooq.tables.records.PepoleBasicRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PepoleBasic extends TableImpl<PepoleBasicRecord> {

    private static final long serialVersionUID = -1129692936;

    /**
     * The reference instance of <code>testdb.pepole_basic</code>
     */
    public static final PepoleBasic PEPOLE_BASIC = new PepoleBasic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PepoleBasicRecord> getRecordType() {
        return PepoleBasicRecord.class;
    }

    /**
     * The column <code>testdb.pepole_basic.id</code>.
     */
    public final TableField<PepoleBasicRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testdb.pepole_basic.birthday_time</code>.
     */
    public final TableField<PepoleBasicRecord, Timestamp> BIRTHDAY_TIME = createField("birthday_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>testdb.pepole_basic.name</code>.
     */
    public final TableField<PepoleBasicRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(80).nullable(false), this, "");

    /**
     * The column <code>testdb.pepole_basic.sext_type</code>.
     */
    public final TableField<PepoleBasicRecord, String> SEXT_TYPE = createField("sext_type", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * Create a <code>testdb.pepole_basic</code> table reference
     */
    public PepoleBasic() {
        this("pepole_basic", null);
    }

    /**
     * Create an aliased <code>testdb.pepole_basic</code> table reference
     */
    public PepoleBasic(String alias) {
        this(alias, PEPOLE_BASIC);
    }

    private PepoleBasic(String alias, Table<PepoleBasicRecord> aliased) {
        this(alias, aliased, null);
    }

    private PepoleBasic(String alias, Table<PepoleBasicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Testdb.TESTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PepoleBasicRecord, Long> getIdentity() {
        return Keys.IDENTITY_PEPOLE_BASIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PepoleBasicRecord> getPrimaryKey() {
        return Keys.KEY_PEPOLE_BASIC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PepoleBasicRecord>> getKeys() {
        return Arrays.<UniqueKey<PepoleBasicRecord>>asList(Keys.KEY_PEPOLE_BASIC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PepoleBasic as(String alias) {
        return new PepoleBasic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PepoleBasic rename(String name) {
        return new PepoleBasic(name, null);
    }
}
