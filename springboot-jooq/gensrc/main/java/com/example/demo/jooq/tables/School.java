/*
 * This file is generated by jOOQ.
*/
package com.example.demo.jooq.tables;


import com.example.demo.jooq.Keys;
import com.example.demo.jooq.Testdb;
import com.example.demo.jooq.tables.records.SchoolRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class School extends TableImpl<SchoolRecord> {

    private static final long serialVersionUID = -1948619202;

    /**
     * The reference instance of <code>testdb.school</code>
     */
    public static final School SCHOOL = new School();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchoolRecord> getRecordType() {
        return SchoolRecord.class;
    }

    /**
     * The column <code>testdb.school.id</code>.
     */
    public final TableField<SchoolRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testdb.school.addr</code>.
     */
    public final TableField<SchoolRecord, String> ADDR = createField("addr", org.jooq.impl.SQLDataType.VARCHAR.length(180).nullable(false), this, "");

    /**
     * The column <code>testdb.school.found_time</code>.
     */
    public final TableField<SchoolRecord, Timestamp> FOUND_TIME = createField("found_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>testdb.school.name</code>.
     */
    public final TableField<SchoolRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(80).nullable(false), this, "");

    /**
     * Create a <code>testdb.school</code> table reference
     */
    public School() {
        this("school", null);
    }

    /**
     * Create an aliased <code>testdb.school</code> table reference
     */
    public School(String alias) {
        this(alias, SCHOOL);
    }

    private School(String alias, Table<SchoolRecord> aliased) {
        this(alias, aliased, null);
    }

    private School(String alias, Table<SchoolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Testdb.TESTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SchoolRecord, Long> getIdentity() {
        return Keys.IDENTITY_SCHOOL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SchoolRecord> getPrimaryKey() {
        return Keys.KEY_SCHOOL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SchoolRecord>> getKeys() {
        return Arrays.<UniqueKey<SchoolRecord>>asList(Keys.KEY_SCHOOL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public School as(String alias) {
        return new School(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public School rename(String name) {
        return new School(name, null);
    }
}
