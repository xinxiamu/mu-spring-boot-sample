/*
 * This file is generated by jOOQ.
*/
package jooq.gen.testDb.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.gen.testDb.Indexes;
import jooq.gen.testDb.Keys;
import jooq.gen.testDb.Testdb;
import jooq.gen.testDb.tables.records.SchoolGradesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolGrades extends TableImpl<SchoolGradesRecord> {

    private static final long serialVersionUID = 1352288912;

    /**
     * The reference instance of <code>testDb.school_grades</code>
     */
    public static final SchoolGrades SCHOOL_GRADES = new SchoolGrades();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchoolGradesRecord> getRecordType() {
        return SchoolGradesRecord.class;
    }

    /**
     * The column <code>testDb.school_grades.school_id</code>.
     */
    public final TableField<SchoolGradesRecord, Long> SCHOOL_ID = createField("school_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testDb.school_grades.grades_id</code>.
     */
    public final TableField<SchoolGradesRecord, Long> GRADES_ID = createField("grades_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>testDb.school_grades</code> table reference
     */
    public SchoolGrades() {
        this(DSL.name("school_grades"), null);
    }

    /**
     * Create an aliased <code>testDb.school_grades</code> table reference
     */
    public SchoolGrades(String alias) {
        this(DSL.name(alias), SCHOOL_GRADES);
    }

    /**
     * Create an aliased <code>testDb.school_grades</code> table reference
     */
    public SchoolGrades(Name alias) {
        this(alias, SCHOOL_GRADES);
    }

    private SchoolGrades(Name alias, Table<SchoolGradesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchoolGrades(Name alias, Table<SchoolGradesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Testdb.TESTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHOOL_GRADES_FKFUQ5QT8CP37MC081C0TM1DSS0, Indexes.SCHOOL_GRADES_UK_KQGTVGTTK4UCTTH050ARS78YD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SchoolGradesRecord>> getKeys() {
        return Arrays.<UniqueKey<SchoolGradesRecord>>asList(Keys.KEY_SCHOOL_GRADES_UK_KQGTVGTTK4UCTTH050ARS78YD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SchoolGradesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SchoolGradesRecord, ?>>asList(Keys.FKFUQ5QT8CP37MC081C0TM1DSS0, Keys.FKTCSXC2TG73GPBP94RH9XICX41);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchoolGrades as(String alias) {
        return new SchoolGrades(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchoolGrades as(Name alias) {
        return new SchoolGrades(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchoolGrades rename(String name) {
        return new SchoolGrades(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchoolGrades rename(Name name) {
        return new SchoolGrades(name, null);
    }
}
